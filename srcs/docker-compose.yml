services:
  nginx:
    build: ./nginx
    container_name: nginx
    image: nginx:42
    volumes:
      - nginx-conf:/etc/nginx/conf.d:ro
    ports:
      - "443:443"
    expose:
      - "80"
    depends_on:
      - frontend
    restart: always
    networks:
      - transcendence-net

  frontend:
    build: ./frontend
    container_name: frontend
    image: frontend:42
    volumes:
      - frontend-data:/usr/share/nginx/html:ro
    expose:
      - "80"
    depends_on:
      - user_management
    restart: always
    networks:
      - transcendence-net

  user_management:
    build: ./user_management_api
    container_name: user_management_api
    image: user_management_api:42
    volumes: #
      - user-app:/usr/src/app
    # expose:
    #   - "8000"
    ports: #
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    restart: always
    networks:
      - transcendence-net
      - backend-net
  
  postgres:
    build: ./postgres
    container_name: postgres
    image: postgres:42
    volumes:
      - postgres-data:/var/lib/postgresql/data/:rw
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SQL_USER}"]
      interval: 5s
      timeout: 4s
      retries: 5
    env_file:
      - .env
    restart: always
    networks:
      - backend-net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - transcendence-net
      - backend-net

  logstash:
    image: docker.elastic.co/logstash/logstash:7.13.2
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
      - "5959:5959"
    depends_on:
      - elasticsearch
    networks:
      - transcendence-net
      - backend-net

  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.2
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - transcendence-net
      - backend-net

volumes:
  nginx-conf:
    name: nginx-conf
    driver: local
    driver_opts:
      type: none
      device: ./nginx/conf
      o: bind
  frontend-data:
    name: frontend-data
    driver: local
    driver_opts:
      type: none
      device: ./frontend
      o: bind
  # django-app:
  #   name: django-app
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: ./django/pong
  #     o: bind

  user-app:
    name: user-app
    driver: local
    driver_opts:
      type: none
      device: ./user_management_api/user_project
      o: bind
  postgres-data:
    name: postgres-data
    driver: local
    driver_opts:
      type: none
      device: ${SQL_PATH}
      o: bind
  es-data:
    name: es-data
    driver: local

networks:
  transcendence-net:
    name: transcendence-net
    driver: bridge
  backend-net:
    name: backend-net
    driver: bridge
    internal: true
